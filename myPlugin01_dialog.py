# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MyPluginDialog
                                 A QGIS plugin
 gis实习
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by dy
        email                : 2018302050239@whu.edu.cn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from .myPlugin01_dialog_base import Ui_Dialog
from .gcj02to import gcj02towgs84
from urllib.parse import quote
from urllib import request
import json

from osgeo import gdal
from osgeo import ogr
from osgeo import osr

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'myPlugin01_dialog_base.ui'))


class MyPluginDialog(QtWidgets.QDialog, Ui_Dialog):
    def __init__(self, parent=None):
        """Constructor."""
        super(MyPluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton.clicked.connect(self.openfile)
        self.city = ''
        self.category = ''
        self.key = ''
        self.filename = ''

    def get_attr(self):
        # 获取参数
        self.city = self.lineEditCity.text()
        self.category = self.lineEditCategory.text()
        self.key = self.lineEditKey.text()
        self.filename = self.lineEditOutput.text()

    def openfile(self):
        # 保存文件的路径和文件名
        self.filename, _filter = QtWidgets.QFileDialog.getSaveFileName(self, "Select output file", "", "*.shp")
        print(self.filename)
        self.lineEditOutput.setText(self.filename)
        # pydevd_pycharm.settrace('localhost', port=53100, stdoutToServer=True, stderrToServer=True)

    def getpoi_page(self, cityname, keywords, amap_web_key, page):
        # 获取单页POIs
        poi_search_url = "http://restapi.amap.com/v3/place/text"
        req_url = poi_search_url + "?key=" + amap_web_key + '&extensions=all&keywords=' + quote(
            keywords) + '&city=' + quote(cityname) + '&citylimit=true' + '&offset=25' + '&page=' + str(
            page) + '&output=json'
        with request.urlopen(req_url) as f:
            data = f.read()
            data = data.decode('utf-8')
        return data

    def hand(self, poilist, result):
        # 将返回的poi数据装入集合返回
        pois = result['pois']
        for i in range(len(pois)):
            poilist.append(pois[i])

    def getpois(self, cityname, keywords, amap_web_key):
        i = 1
        poilist = []
        while True:  # 使用while循环不断分页获取数据
            result = self.getpoi_page(cityname, keywords, amap_web_key, i)
            print(result)
            result = json.loads(result)  # 将字符串转换为json
            if result['count'] == '0':
                break
            self.hand(poilist, result)
            i = i + 1
        return poilist

    def writeShp(self, path_str, poilist):
        # 生成shp文件
        # 支持中文路径
        gdal.SetConfigOption("GDAL_FILENAME_IS_UTF8", "YES")
        # 属性表字段支持中文
        gdal.SetConfigOption("SHAPE_ENCODING", "UTF-8")
        # 注册驱动
        ogr.RegisterAll()
        # 创建shp数据
        strDriverName = "ESRI Shapefile"
        oDriver = ogr.GetDriverByName(strDriverName)
        if oDriver == None:
            return "驱动不可用：" + strDriverName
        # 创建数据源
        oDS = oDriver.CreateDataSource(path_str)
        if oDS == None:
            return "创建文件失败：" + path_str
        # 创建一个多边形图层，指定坐标系为WGS84
        # papszLCO = []
        geosrs = osr.SpatialReference()
        geosrs.SetWellKnownGeogCS("WGS84")
        # 线：ogr_type = ogr.wkbLineString
        # 点：ogr_type = ogr.wkbPoint
        ogr_type = ogr.wkbPoint
        # 面的类型为Polygon，线的类型为Polyline，点的类型为Point
        oLayer = oDS.CreateLayer("Point", geosrs, ogr_type, options=["ENCODING=UTF-8"])
        if oLayer == None:
            return "图层创建失败！"
        # 创建属性表
        # 创建id字段
        oId = ogr.FieldDefn("id", ogr.OFTInteger)
        oLayer.CreateField(oId, 1)
        # 创建其他字段
        oPname = ogr.FieldDefn("pname", ogr.OFTString)
        oLayer.CreateField(oPname, 1)
        oCityname = ogr.FieldDefn("cityname", ogr.OFTString)
        oLayer.CreateField(oCityname, 1)
        oAdname = ogr.FieldDefn("adname", ogr.OFTString)
        oLayer.CreateField(oAdname, 1)
        oName = ogr.FieldDefn("name", ogr.OFTString)
        oLayer.CreateField(oName, 1)
        oAddress = ogr.FieldDefn("address", ogr.OFTString)
        oAddress.SetWidth(100)
        oLayer.CreateField(oAddress, 1)
        oDefn = oLayer.GetLayerDefn()
        # 创建要素
        # 数据集
        for index, f in enumerate(poilist):
            oFeaturePolygon = ogr.Feature(oDefn)
            oFeaturePolygon.SetField("id", index)
            oFeaturePolygon.SetField("pname", f['pname'])
            oFeaturePolygon.SetField("cityname", f['cityname'])
            oFeaturePolygon.SetField("adname", f['adname'])
            oFeaturePolygon.SetField("name", f['name'])
            oFeaturePolygon.SetField("address", str(f['address']))
            location = f['location']
            lng = str(location).split(",")[0]
            lat = str(location).split(",")[1]
            location_wgs84 = gcj02towgs84(float(lng), float(lat))
            geomPolygon = ogr.CreateGeometryFromWkt('POINT('+str(location_wgs84[0])+' '+str(location_wgs84[1])+')')
            oFeaturePolygon.SetGeometry(geomPolygon)
            oLayer.CreateFeature(oFeaturePolygon)
        # 创建完成后，关闭进程
        oDS.Destroy()
        return "数据集创建完成！"
